﻿// <auto-generated />

 #nullable disable

 using Microsoft.EntityFrameworkCore;
 using Microsoft.EntityFrameworkCore.Infrastructure;
 using OnlineShop.Infrastructure.Data;

 namespace OnlineShop.Infrastructure.Migrations;

[DbContext(typeof(OnlineShopDbContext))]
partial class OnlineShopDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.10")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("AspNetUserRole", b =>
        {
            b.Property<string>("UserId")
                .HasColumnType("text");

            b.Property<string>("RoleId")
                .HasColumnType("text");

            b.HasKey("UserId", "RoleId");

            b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

            b.ToTable("AspNetUserRoles", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetRole", b =>
        {
            b.Property<string>("Id")
                .HasColumnType("text");

            b.Property<string>("ConcurrencyStamp")
                .HasColumnType("text");

            b.Property<string>("Name")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.Property<string>("NormalizedName")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.HasKey("Id");

            b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                .IsUnique();

            b.ToTable("AspNetRoles");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetRoleClaim", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                .HasColumnType("text");

            b.Property<string>("ClaimValue")
                .HasColumnType("text");

            b.Property<string>("RoleId")
                .IsRequired()
                .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

            b.ToTable("AspNetRoleClaims");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUser", b =>
        {
            b.Property<string>("Id")
                .HasColumnType("text");

            b.Property<int>("AccessFailedCount")
                .HasColumnType("integer");

            b.Property<string>("ConcurrencyStamp")
                .HasColumnType("text");

            b.Property<string>("Email")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.Property<bool>("EmailConfirmed")
                .HasColumnType("boolean");

            b.Property<string>("Initials")
                .HasColumnType("text");

            b.Property<bool>("LockoutEnabled")
                .HasColumnType("boolean");

            b.Property<DateTime?>("LockoutEnd")
                .HasColumnType("timestamp with time zone");

            b.Property<string>("NormalizedEmail")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.Property<string>("NormalizedUserName")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.Property<string>("PasswordHash")
                .HasColumnType("text");

            b.Property<string>("PhoneNumber")
                .HasColumnType("text");

            b.Property<bool>("PhoneNumberConfirmed")
                .HasColumnType("boolean");

            b.Property<string>("SecurityStamp")
                .HasColumnType("text");

            b.Property<bool>("TwoFactorEnabled")
                .HasColumnType("boolean");

            b.Property<string>("UserName")
                .HasMaxLength(256)
                .HasColumnType("character varying(256)");

            b.HasKey("Id");

            b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

            b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                .IsUnique();

            b.ToTable("AspNetUsers");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserClaim", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                .HasColumnType("text");

            b.Property<string>("ClaimValue")
                .HasColumnType("text");

            b.Property<string>("UserId")
                .IsRequired()
                .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

            b.ToTable("AspNetUserClaims");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserLogin", b =>
        {
            b.Property<string>("LoginProvider")
                .HasColumnType("text");

            b.Property<string>("ProviderKey")
                .HasColumnType("text");

            b.Property<string>("ProviderDisplayName")
                .HasColumnType("text");

            b.Property<string>("UserId")
                .IsRequired()
                .HasColumnType("text");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

            b.ToTable("AspNetUserLogins");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserToken", b =>
        {
            b.Property<string>("UserId")
                .HasColumnType("text");

            b.Property<string>("LoginProvider")
                .HasColumnType("text");

            b.Property<string>("Name")
                .HasColumnType("text");

            b.Property<string>("Value")
                .HasColumnType("text");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.CartItem", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<int>("ProductId")
                .HasColumnType("integer")
                .HasColumnName("product_id");

            b.Property<int>("Quantity")
                .HasColumnType("integer")
                .HasColumnName("quantity");

            b.Property<int>("ShoppingSessionId")
                .HasColumnType("integer")
                .HasColumnName("shopping_session_id");

            b.HasKey("Id")
                .HasName("cart_item_pkey");

            b.HasIndex("ProductId");

            b.HasIndex("ShoppingSessionId");

            b.ToTable("cart_item", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Comment", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("Comment1")
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("comment");

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<int>("ProductId")
                .HasColumnType("integer")
                .HasColumnName("product_id");

            b.Property<string>("UserId")
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnType("character varying(128)")
                .HasColumnName("user_id");

            b.HasKey("Id")
                .HasName("comment_pkey");

            b.HasIndex("ProductId");

            b.HasIndex("UserId");

            b.ToTable("comment", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Discount", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<string>("Description")
                .HasColumnType("text")
                .HasColumnName("description");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<string>("Name")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("name");

            b.Property<decimal>("Value")
                .HasColumnType("numeric")
                .HasColumnName("value");

            b.HasKey("Id")
                .HasName("discount_pkey");

            b.HasIndex(new[] { "Name" }, "discount_name_key")
                .IsUnique();

            b.ToTable("discount", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.OrderDetail", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<decimal>("Total")
                .HasColumnType("numeric")
                .HasColumnName("total");

            b.Property<string>("UserId")
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnType("character varying(128)")
                .HasColumnName("user_id");

            b.HasKey("Id")
                .HasName("order_detail_pkey");

            b.HasIndex("UserId");

            b.ToTable("order_detail", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.OrderItem", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<int>("OrderDetailId")
                .HasColumnType("integer")
                .HasColumnName("order_detail_id");

            b.Property<int>("ProductId")
                .HasColumnType("integer")
                .HasColumnName("product_id");

            b.Property<int>("Quantity")
                .HasColumnType("integer")
                .HasColumnName("quantity");

            b.HasKey("Id")
                .HasName("order_item_pkey");

            b.HasIndex("OrderDetailId");

            b.HasIndex("ProductId");

            b.ToTable("order_item", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.PaymentDetail", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<decimal>("Amount")
                .HasColumnType("numeric")
                .HasColumnName("amount");

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<int>("OrderDetailId")
                .HasColumnType("integer")
                .HasColumnName("order_detail_id");

            b.Property<string>("Provider")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("provider");

            b.Property<string>("Status")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("status");

            b.HasKey("Id")
                .HasName("payment_detail_pkey");

            b.HasIndex("OrderDetailId");

            b.ToTable("payment_detail", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Product", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<string>("Description")
                .HasColumnType("text")
                .HasColumnName("description");

            b.Property<int>("DiscountId")
                .HasColumnType("integer")
                .HasColumnName("discount_id");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<string>("Name")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("name");

            b.Property<decimal>("Price")
                .HasColumnType("numeric")
                .HasColumnName("price");

            b.Property<int>("ProductCategoryId")
                .HasColumnType("integer")
                .HasColumnName("product_category_id");

            b.Property<int>("Quantity")
                .HasColumnType("integer")
                .HasColumnName("quantity");

            b.Property<string>("Sku")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("sku");

            b.HasKey("Id")
                .HasName("product_pkey");

            b.HasIndex("DiscountId");

            b.HasIndex("ProductCategoryId");

            b.HasIndex(new[] { "Name" }, "product_name_key")
                .IsUnique();

            b.ToTable("product", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ProductAttachment", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<byte[]>("Data")
                .IsRequired()
                .HasColumnType("bytea")
                .HasColumnName("data");

            b.Property<string>("Name")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("name");

            b.Property<int>("ProductId")
                .HasColumnType("integer")
                .HasColumnName("product_id");

            b.HasKey("Id")
                .HasName("product_attachment_pkey");

            b.HasIndex("ProductId");

            b.HasIndex(new[] { "Name" }, "product_attachment_name_key")
                .IsUnique();

            b.ToTable("product_attachment", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ProductCategory", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<string>("Description")
                .HasColumnType("text")
                .HasColumnName("description");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<string>("Name")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("name");

            b.HasKey("Id")
                .HasName("product_category_pkey");

            b.HasIndex(new[] { "Name" }, "product_category_name_key")
                .IsUnique();

            b.ToTable("product_category", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ShoppingSession", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<string>("UserId")
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnType("character varying(128)")
                .HasColumnName("user_id");

            b.HasKey("Id")
                .HasName("shopping_session_pkey");

            b.HasIndex("UserId");

            b.ToTable("shopping_session", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.UserPayment", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<string>("AccountNo")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("account_no");

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<string>("PaymentType")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("payment_type");

            b.Property<string>("Provider")
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnType("character varying(256)")
                .HasColumnName("provider");

            b.Property<string>("UserId")
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnType("character varying(128)")
                .HasColumnName("user_id");

            b.HasKey("Id")
                .HasName("user_payment_pkey");

            b.HasIndex("UserId");

            b.ToTable("user_payment", (string)null);
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Wishlist", b =>
        {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("integer")
                .HasColumnName("id");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            b.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");

            b.Property<DateTime?>("ModifiedAt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified_at");

            b.Property<int>("ProductId")
                .HasColumnType("integer")
                .HasColumnName("product_id");

            b.Property<string>("UserId")
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnType("character varying(128)")
                .HasColumnName("user_id");

            b.HasKey("Id")
                .HasName("wishlist_pkey");

            b.HasIndex("ProductId");

            b.HasIndex("UserId");

            b.ToTable("wishlist", (string)null);
        });

        modelBuilder.Entity("AspNetUserRole", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetRole", null)
                .WithMany()
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetRoleClaim", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetRole", "Role")
                .WithMany("AspNetRoleClaims")
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Role");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserClaim", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("AspNetUserClaims")
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserLogin", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("AspNetUserLogins")
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUserToken", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("AspNetUserTokens")
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.CartItem", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.Product", "Product")
                .WithMany("CartItems")
                .HasForeignKey("ProductId")
                .IsRequired()
                .HasConstraintName("fk_cart_item_product");

            b.HasOne("OnlineShop.Scaffold.Scaffold.ShoppingSession", "ShoppingSession")
                .WithMany("CartItems")
                .HasForeignKey("ShoppingSessionId")
                .IsRequired()
                .HasConstraintName("fk_cart_item_shopping_session");

            b.Navigation("Product");

            b.Navigation("ShoppingSession");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Comment", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.Product", "Product")
                .WithMany("Comments")
                .HasForeignKey("ProductId")
                .IsRequired()
                .HasConstraintName("fk_comment_product");

            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("Comments")
                .HasForeignKey("UserId")
                .IsRequired()
                .HasConstraintName("fk_comment_aspnetusers");

            b.Navigation("Product");

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.OrderDetail", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("OrderDetails")
                .HasForeignKey("UserId")
                .IsRequired()
                .HasConstraintName("fk_order_detail_aspnetusers");

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.OrderItem", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.OrderDetail", "OrderDetail")
                .WithMany("OrderItems")
                .HasForeignKey("OrderDetailId")
                .IsRequired()
                .HasConstraintName("fk_order_item_order_detail");

            b.HasOne("OnlineShop.Scaffold.Scaffold.Product", "Product")
                .WithMany("OrderItems")
                .HasForeignKey("ProductId")
                .IsRequired()
                .HasConstraintName("fk_order_item_product");

            b.Navigation("OrderDetail");

            b.Navigation("Product");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.PaymentDetail", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.OrderDetail", "OrderDetail")
                .WithMany("PaymentDetails")
                .HasForeignKey("OrderDetailId")
                .IsRequired()
                .HasConstraintName("fk_payment_detail_order_detail");

            b.Navigation("OrderDetail");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Product", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.Discount", "Discount")
                .WithMany("Products")
                .HasForeignKey("DiscountId")
                .IsRequired()
                .HasConstraintName("fk_product_discount");

            b.HasOne("OnlineShop.Scaffold.Scaffold.ProductCategory", "ProductCategory")
                .WithMany("Products")
                .HasForeignKey("ProductCategoryId")
                .IsRequired()
                .HasConstraintName("fk_product_product_category");

            b.Navigation("Discount");

            b.Navigation("ProductCategory");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ProductAttachment", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.Product", "Product")
                .WithMany("ProductAttachments")
                .HasForeignKey("ProductId")
                .IsRequired()
                .HasConstraintName("fk_product_image_product");

            b.Navigation("Product");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ShoppingSession", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("ShoppingSessions")
                .HasForeignKey("UserId")
                .IsRequired()
                .HasConstraintName("fk_shopping_session_aspnetusers");

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.UserPayment", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("UserPayments")
                .HasForeignKey("UserId")
                .IsRequired()
                .HasConstraintName("fk_user_payment_aspnetusers");

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Wishlist", b =>
        {
            b.HasOne("OnlineShop.Scaffold.Scaffold.Product", "Product")
                .WithMany("Wishlists")
                .HasForeignKey("ProductId")
                .IsRequired()
                .HasConstraintName("fk_wishlist_product");

            b.HasOne("OnlineShop.Scaffold.Scaffold.AspNetUser", "User")
                .WithMany("Wishlists")
                .HasForeignKey("UserId")
                .IsRequired()
                .HasConstraintName("fk_wishlist_aspnetusers");

            b.Navigation("Product");

            b.Navigation("User");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetRole", b =>
        {
            b.Navigation("AspNetRoleClaims");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.AspNetUser", b =>
        {
            b.Navigation("AspNetUserClaims");

            b.Navigation("AspNetUserLogins");

            b.Navigation("AspNetUserTokens");

            b.Navigation("Comments");

            b.Navigation("OrderDetails");

            b.Navigation("ShoppingSessions");

            b.Navigation("UserPayments");

            b.Navigation("Wishlists");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Discount", b =>
        {
            b.Navigation("Products");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.OrderDetail", b =>
        {
            b.Navigation("OrderItems");

            b.Navigation("PaymentDetails");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.Product", b =>
        {
            b.Navigation("CartItems");

            b.Navigation("Comments");

            b.Navigation("OrderItems");

            b.Navigation("ProductAttachments");

            b.Navigation("Wishlists");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ProductCategory", b =>
        {
            b.Navigation("Products");
        });

        modelBuilder.Entity("OnlineShop.Scaffold.Scaffold.ShoppingSession", b =>
        {
            b.Navigation("CartItems");
        });
#pragma warning restore 612, 618
    }
}